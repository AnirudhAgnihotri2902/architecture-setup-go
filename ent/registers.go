// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/AnirudhAgnihotri2902/architecture-setup-go/ent/registers"
)

// Registers is the model entity for the Registers schema.
type Registers struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Registers) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case registers.FieldID:
			values[i] = new(sql.NullInt64)
		case registers.FieldUsername, registers.FieldPassword:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Registers", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Registers fields.
func (r *Registers) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case registers.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case registers.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				r.Username = value.String
			}
		case registers.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				r.Password = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Registers.
// Note that you need to call Registers.Unwrap() before calling this method if this Registers
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Registers) Update() *RegistersUpdateOne {
	return NewRegistersClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Registers entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Registers) Unwrap() *Registers {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Registers is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Registers) String() string {
	var builder strings.Builder
	builder.WriteString("Registers(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("username=")
	builder.WriteString(r.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(r.Password)
	builder.WriteByte(')')
	return builder.String()
}

// RegistersSlice is a parsable slice of Registers.
type RegistersSlice []*Registers

func (r RegistersSlice) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
